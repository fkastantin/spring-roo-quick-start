// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app.web;

import com.app.model.Course;
import com.app.model.Student;
import com.app.service.api.CourseService;
import com.app.service.api.StudentService;
import com.app.web.StudentsCollectionThymeleafController;
import com.app.web.StudentsCollectionThymeleafLinkFactory;
import com.app.web.StudentsItemRegisteredCoursesThymeleafController;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect StudentsItemRegisteredCoursesThymeleafController_Roo_Thymeleaf {
    
    declare @type: StudentsItemRegisteredCoursesThymeleafController: @Controller;
    
    declare @type: StudentsItemRegisteredCoursesThymeleafController: @RequestMapping(value = "/students/{student}/registeredCourses", name = "StudentsItemRegisteredCoursesThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private StudentService StudentsItemRegisteredCoursesThymeleafController.studentService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CourseService StudentsItemRegisteredCoursesThymeleafController.courseService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource StudentsItemRegisteredCoursesThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<StudentsCollectionThymeleafController> StudentsItemRegisteredCoursesThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService StudentsItemRegisteredCoursesThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param studentService
     * @param courseService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public StudentsItemRegisteredCoursesThymeleafController.new(StudentService studentService, CourseService courseService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setStudentService(studentService);
        setCourseService(courseService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(StudentsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return StudentService
     */
    public StudentService StudentsItemRegisteredCoursesThymeleafController.getStudentService() {
        return studentService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param studentService
     */
    public void StudentsItemRegisteredCoursesThymeleafController.setStudentService(StudentService studentService) {
        this.studentService = studentService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CourseService
     */
    public CourseService StudentsItemRegisteredCoursesThymeleafController.getCourseService() {
        return courseService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param courseService
     */
    public void StudentsItemRegisteredCoursesThymeleafController.setCourseService(CourseService courseService) {
        this.courseService = courseService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource StudentsItemRegisteredCoursesThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void StudentsItemRegisteredCoursesThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<StudentsCollectionThymeleafController> StudentsItemRegisteredCoursesThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void StudentsItemRegisteredCoursesThymeleafController.setCollectionLink(MethodLinkBuilderFactory<StudentsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService StudentsItemRegisteredCoursesThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void StudentsItemRegisteredCoursesThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Student
     */
    @ModelAttribute
    public Student StudentsItemRegisteredCoursesThymeleafController.getStudent(@PathVariable("student") Long id, Locale locale, HttpMethod method) {
        Student student = null;
        if (HttpMethod.PUT.equals(method)) {
            student = studentService.findOneForUpdate(id);
        } else {
            student = studentService.findOne(id);
        }
        
        if (student == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Student", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return student;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void StudentsItemRegisteredCoursesThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void StudentsItemRegisteredCoursesThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param students
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Course>> StudentsItemRegisteredCoursesThymeleafController.datatables(@ModelAttribute Student students, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Course> registeredCourses = getCourseService().findByStudentsContains(students, search, pageable);
        long totalRegisteredCoursesCount = getCourseService().countByStudentsContains(students);
        ConvertedDatatablesData<Course> data =  new ConvertedDatatablesData<Course>(registeredCourses, totalRegisteredCoursesCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Course>> StudentsItemRegisteredCoursesThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Course> registeredCourses = getCourseService().findAllByIdsIn(ids, search, pageable);
        long totalRegisteredCoursesCount = registeredCourses.getTotalElements();
        ConvertedDatatablesData<Course> data =  new ConvertedDatatablesData<Course>(registeredCourses, totalRegisteredCoursesCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView StudentsItemRegisteredCoursesThymeleafController.createForm(@ModelAttribute Student student, Model model) {
        populateForm(model);
        model.addAttribute("course", new Course());
        return new ModelAndView("students/registeredCourses/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @param registeredCoursesToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromRegisteredCourses", value = "/{registeredCoursesToRemove}")
    @ResponseBody
    public ResponseEntity<?> StudentsItemRegisteredCoursesThymeleafController.removeFromRegisteredCourses(@ModelAttribute Student student, @PathVariable("registeredCoursesToRemove") Long registeredCoursesToRemove) {
        getStudentService().removeFromRegisteredCourses(student,Collections.singleton(registeredCoursesToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @param registeredCoursesToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromRegisteredCoursesBatch", value = "/batch/{registeredCoursesToRemove}")
    @ResponseBody
    public ResponseEntity<?> StudentsItemRegisteredCoursesThymeleafController.removeFromRegisteredCoursesBatch(@ModelAttribute Student student, @PathVariable("registeredCoursesToRemove") Collection<Long> registeredCoursesToRemove) {
        getStudentService().removeFromRegisteredCourses(student, registeredCoursesToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @param registeredCourses
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView StudentsItemRegisteredCoursesThymeleafController.create(@ModelAttribute Student student, @RequestParam(value = "registeredCoursesIds", required = false) List<Long> registeredCourses, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (registeredCourses != null) {
            for (Iterator<Long> iterator = registeredCourses.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, student.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (registeredCourses != null) {
                student.setRegisteredCourses(new HashSet<Course>(getCourseService().findAll(registeredCourses)));
            }else{
                student.setRegisteredCourses(new HashSet<Course>());
            }
            // Reset the version to prevent update
             student.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("student", student);
            model.addAttribute("concurrency", true);
            return new ModelAndView("students/registeredCourses/create");
        }else if(!Objects.equals(version, student.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("student", student);
            model.addAttribute("concurrency", false);
            return new ModelAndView("students/registeredCourses/create");
        }
        getStudentService().setRegisteredCourses(student,registeredCourses);
        return new ModelAndView("redirect:" + getCollectionLink().to(StudentsCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
