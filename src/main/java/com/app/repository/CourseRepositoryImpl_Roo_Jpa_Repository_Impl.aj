// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app.repository;

import com.app.model.Course;
import com.app.model.QCourse;
import com.app.model.Student;
import com.app.repository.CourseRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect CourseRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: CourseRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CourseRepositoryImpl.COURSE_NAME = "courseName";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Course> CourseRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCourse course = QCourse.course;
        
        JPQLQuery<Course> query = from(course);
        
        Path<?>[] paths = new Path<?>[] {course.courseName};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(COURSE_NAME, course.courseName);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, course);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Course> CourseRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QCourse course = QCourse.course;
        
        JPQLQuery<Course> query = from(course);
        
        Path<?>[] paths = new Path<?>[] {course.courseName};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(course.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(COURSE_NAME, course.courseName);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, course);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param students
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Course> CourseRepositoryImpl.findByStudentsContains(Student students, GlobalSearch globalSearch, Pageable pageable) {
        
        QCourse course = QCourse.course;
        
        JPQLQuery<Course> query = from(course);
        
        Assert.notNull(students, "students is required");
        
        query.where(course.students.contains(students));
        Path<?>[] paths = new Path<?>[] {course.courseName};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(COURSE_NAME, course.courseName);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, course);
    }
    
}
