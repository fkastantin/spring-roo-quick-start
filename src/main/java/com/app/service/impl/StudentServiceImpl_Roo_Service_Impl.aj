// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app.service.impl;

import com.app.dto.StudentSearchDto;
import com.app.model.Course;
import com.app.model.Student;
import com.app.repository.StudentRepository;
import com.app.service.api.CourseService;
import com.app.service.impl.StudentServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect StudentServiceImpl_Roo_Service_Impl {
    
    declare @type: StudentServiceImpl: @Service;
    
    declare @type: StudentServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private StudentRepository StudentServiceImpl.studentRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CourseService StudentServiceImpl.courseService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param studentRepository
     * @param courseService
     */
    @Autowired
    public StudentServiceImpl.new(StudentRepository studentRepository, @Lazy CourseService courseService) {
        setStudentRepository(studentRepository);
        setCourseService(courseService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return StudentRepository
     */
    public StudentRepository StudentServiceImpl.getStudentRepository() {
        return studentRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param studentRepository
     */
    public void StudentServiceImpl.setStudentRepository(StudentRepository studentRepository) {
        this.studentRepository = studentRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CourseService
     */
    public CourseService StudentServiceImpl.getCourseService() {
        return courseService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param courseService
     */
    public void StudentServiceImpl.setCourseService(CourseService courseService) {
        this.courseService = courseService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @return Map
     */
    public Map<String, List<MessageI18n>> StudentServiceImpl.validate(Student student) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @param registeredCoursesToAdd
     * @return Student
     */
    @Transactional
    public Student StudentServiceImpl.addToRegisteredCourses(Student student, Iterable<Long> registeredCoursesToAdd) {
        List<Course> registeredCourses = getCourseService().findAll(registeredCoursesToAdd);
        student.addToRegisteredCourses(registeredCourses);
        return getStudentRepository().save(student);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @param registeredCoursesToRemove
     * @return Student
     */
    @Transactional
    public Student StudentServiceImpl.removeFromRegisteredCourses(Student student, Iterable<Long> registeredCoursesToRemove) {
        List<Course> registeredCourses = getCourseService().findAll(registeredCoursesToRemove);
        student.removeFromRegisteredCourses(registeredCourses);
        return getStudentRepository().save(student);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     * @param registeredCourses
     * @return Student
     */
    @Transactional
    public Student StudentServiceImpl.setRegisteredCourses(Student student, Iterable<Long> registeredCourses) {
        List<Course> items = getCourseService().findAll(registeredCourses);
        Set<Course> currents = student.getRegisteredCourses();
        Set<Course> toRemove = new HashSet<Course>();
        for (Iterator<Course> iterator = currents.iterator(); iterator.hasNext();) {
            Course nextCourse = iterator.next();
            if (items.contains(nextCourse)) {
                items.remove(nextCourse);
            } else {
                toRemove.add(nextCourse);
            }
        }
        student.removeFromRegisteredCourses(toRemove);
        student.addToRegisteredCourses(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        student.setVersion(student.getVersion() + 1);
        return getStudentRepository().save(student);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param student
     */
    @Transactional
    public void StudentServiceImpl.delete(Student student) {
        // Clear bidirectional many-to-many parent relationship with Course
        for (Course item : student.getRegisteredCourses()) {
            item.getStudents().remove(student);
        }
        
        getStudentRepository().delete(student);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Student> StudentServiceImpl.save(Iterable<Student> entities) {
        return getStudentRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void StudentServiceImpl.delete(Iterable<Long> ids) {
        List<Student> toDelete = getStudentRepository().findAll(ids);
        getStudentRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Student
     */
    @Transactional
    public Student StudentServiceImpl.save(Student entity) {
        return getStudentRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Student
     */
    public Student StudentServiceImpl.findOne(Long id) {
        return getStudentRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Student
     */
    public Student StudentServiceImpl.findOneForUpdate(Long id) {
        return getStudentRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Student> StudentServiceImpl.findAll(Iterable<Long> ids) {
        return getStudentRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Student> StudentServiceImpl.findAll() {
        return getStudentRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long StudentServiceImpl.count() {
        return getStudentRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Student> StudentServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getStudentRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Student> StudentServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getStudentRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Student> StudentServiceImpl.findByFirstNameAndLastName(StudentSearchDto formBean, GlobalSearch globalSearch, Pageable pageable) {
        return getStudentRepository().findByFirstNameAndLastName(formBean, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long StudentServiceImpl.countByFirstNameAndLastName(StudentSearchDto formBean) {
        return getStudentRepository().countByFirstNameAndLastName(formBean);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Student> StudentServiceImpl.getEntityType() {
        return Student.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> StudentServiceImpl.getIdType() {
        return Long.class;
    }
    
}
